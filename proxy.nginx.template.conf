worker_processes 1;
 
events { worker_connections 1024; }
 
http {
 
    sendfile on;
 
    upstream docker-server {
        server server:${SERVER_PORT};
    }
    
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#var_host
    proxy_set_header   Host $host;
    # $remote_addr = <IP клиента>
    proxy_set_header   X-Real-IP $remote_addr;
    # retrieved from the client and adds the NGINX server's IP address to the end
    # <IP клиента>, <IP proxy1>, <IP proxy2>
    # X-Forwarded-For + <$remote_addr>
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for; 
    # клиент host
    proxy_set_header   X-Forwarded-Host $server_name;

    #add_header X-Content-Type-Options "nosniff"; # надо проверять nosniff+image

    # уведомить браузер о том, что доступ должен быть осуществлён только посредством HTTPS
    # add_header Strict-Transport-Security "max-age=31536000;"; 

    ssi on;

    server {
        listen [::]:443 ssl backlog=2048 ipv6only=off; # + http2
        http2 on;

        location / {
            proxy_pass         http://docker-server;
            proxy_redirect     off;
        }

        
        ssl_ciphers HIGH:!RC4:!aNULL:!eNULL:!MD5:!EXPORT:!EXP:!LOW:!SEED:!CAMELLIA:!IDEA:!PSK:!SRP:!SSLv2;
        ssl_prefer_server_ciphers on;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

        ssl_certificate ${CERTIFICATE_PATH}; # Путь до сертификата
        ssl_certificate_key ${CERTIFICATE_PRIVATE_PATH}; # Путь до ключа
    }

    server {
        listen 8086; # default_server;
        listen [::]:8086; # default_server;
        #server_name _;
        return 301 https://$host$request_uri;

        location / {
            proxy_pass         http://docker-server;
            proxy_redirect     off;
        }
    } 
 
}
